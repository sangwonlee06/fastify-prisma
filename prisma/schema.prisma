// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  token    Token[]
  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model Token {
  id           Int    @id @default(autoincrement())
  userId       Int
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String
}

model Post {
  id      Int    @id @default(autoincrement())
  content String

  likeCount    Int       @default(0)
  likes        Like[]
  commentCount Int       @default(0)
  comments     Comment[]
  createdAt    DateTime  @default(now())
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
